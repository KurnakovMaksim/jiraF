name: Goal microservice SonarCloud
on:
  push:
  pull_request:
    types: [opened, synchronize, reopened]
jobs:
  build:
    name: Build
    runs-on: windows-latest
    steps:
      - name: Setup .NET
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        if: ${{ secrets.SONAR_TOKEN }} == ""
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 6.0.x
      - name: Set up JDK 11
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        if: ${{ secrets.SONAR_TOKEN }} == ""
        uses: actions/setup-java@v1
        with:
          java-version: 1.11
      - uses: actions/checkout@v2
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        if: ${{ secrets.SONAR_TOKEN }} == ""
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Cache SonarCloud packages
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        if: ${{ secrets.SONAR_TOKEN }} == ""
        uses: actions/cache@v1
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache SonarCloud scanner
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        if: ${{ secrets.SONAR_TOKEN }} == ""
        id: cache-sonar-scanner
        uses: actions/cache@v1
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
      - name: Set GoalApiKey
        if: ${{ secrets.SONAR_TOKEN }} == ""
        id: setgoalapikey
        shell: bash
        run: |
          if [ "$GOAL_API_KEY" != "" ]; then
            dotnet user-secrets set "GoalApiKey" "$GOAL_API_KEY" --project Goal/src/jiraF.Goal.API/
          else
            dotnet user-secrets set "GoalApiKey" "12345testApiKey" --project Goal/src/jiraF.Goal.API/
          fi
        env:
          GOAL_API_KEY: ${{ secrets.GOAL_API_KEY }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        if: ${{ secrets.SONAR_TOKEN }} == ""
        shell: powershell
        run: |
          dotnet tool install --global dotnet-coverage
          .\.sonar\scanner\dotnet-sonarscanner begin /k:"KurnakovMaksim_jiraF" /o:"kurnakovmaksim" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.cs.vscoveragexml.reportsPaths=coverage.xml
          dotnet restore Goal
          dotnet build Goal --no-restore
          dotnet test Goal --no-build --verbosity normal
          dotnet-coverage collect 'dotnet test' -f xml -o 'coverage.xml'
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
